#! /usr/bin/env node
import { readFileSync, writeFileSync, existsSync } from "fs";
import {resolve, dirname} from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const rootPath = resolve(process.env.INIT_CWD || process.cwd());
const files = [
    ".editorconfig",
    ".prettierignore",
    ".prettierrc.js",
    "eslint.config.mjs",
    "tsconfig.json",
];

function addConfigurationFiles() {
    console.log('\nüìù Aggiunta dei file di configurazione...');
    let addedFiles = 0;
    let skippedFiles = 0;
    let overwrittenFiles = 0;
    let errorFiles = 0;
    const generatedByComment = "This file was generated by @ciffi-js/releaser.";
    
    files.forEach((file) => {
        try {
            const filePath = resolve(rootPath, file);
            const sampleFilePath = resolve(__dirname, "../sample-files", file);
            
            // Verifica se il file di esempio esiste
            if (!existsSync(sampleFilePath)) {
                console.log(`‚ùå File di esempio ${file} non trovato in sample-files`);
                errorFiles++;
                return;
            }
            
            // Verifica se il file esiste gi√†
            if (existsSync(filePath)) {
                // Leggi il contenuto del file esistente
                const existingContent = readFileSync(filePath, 'utf8');
                
                // Controlla se il file contiene gi√† il commento di generazione
                if (existingContent.includes(generatedByComment)) {
                    console.log(`‚è© File ${file} gi√† generato da releaser, salto...`);
                    skippedFiles++;
                    return;
                } else {
                    console.log(`üîÑ File ${file} esistente ma non generato da releaser, sovrascrivo...`);
                    overwrittenFiles++;
                }
            } else {
                addedFiles++;
            }
            
            // Leggi e scrivi il file
            writeFileSync(filePath, readFileSync(sampleFilePath));
            console.log(`‚úÖ File ${file} ${existsSync(filePath) ? 'sovrascritto' : 'aggiunto'} con successo`);
        } catch (error) {
            console.error(`‚ùå Errore durante l'aggiunta del file ${file}: ${error.message}`);
            errorFiles++;
        }
    });
    
    console.log(`\nüìä Riepilogo: ${addedFiles} file aggiunti, ${overwrittenFiles} file sovrascritti, ${skippedFiles} file saltati, ${errorFiles} errori\n`);
}

export default addConfigurationFiles;
