#! /usr/bin/env node
import { writeFileSync, existsSync } from "fs";
import { resolve } from 'path';
import fs from 'fs';
// I dati dei file di esempio verranno importati dal bundle

const rootPath = resolve(process.env.INIT_CWD || process.cwd());
const files = [
    ".editorconfig",
    ".prettierignore",
    ".prettierrc.js",
    "eslint.config.mjs",
    "tsconfig.json",
];

function addConfigurationFiles() {
    console.log('\nüìù Aggiunta dei file di configurazione...');
    let addedFiles = 0;
    let skippedFiles = 0;
    let overwrittenFiles = 0;
    let errorFiles = 0;
    const generatedByComment = "This file was generated by @ciffi-js/releaser.";
    
    console.log('\n‚úÖ Utilizzo dei file di configurazione incorporati nel bundle');
    
    // Accedi ai dati dei file di esempio dalla variabile globale
    const sampleFilesData = globalThis.sampleFiles || {};
    
    // Verifica se i dati dei file di esempio sono disponibili
    if (!sampleFilesData || Object.keys(sampleFilesData).length === 0) {
        console.error('‚ùå Dati dei file di configurazione non disponibili nel bundle');
        console.log('Dati disponibili:', JSON.stringify(sampleFilesData, null, 2));
        return;
    }
    
    files.forEach((file) => {
        try {
            const filePath = resolve(rootPath, file);
            
            // Verifica se il contenuto del file √® disponibile nei dati incorporati
            if (!sampleFilesData[file]) {
                console.log(`‚ùå File di esempio ${file} non trovato nei dati incorporati`);
                errorFiles++;
                return;
            }
            
            // Verifica se il file esiste gi√†
            if (existsSync(filePath)) {
                try {
                    // Leggi il contenuto del file esistente
                    const existingContent = fs.readFileSync(filePath, 'utf8');
                    
                    // Controlla se il file contiene gi√† il commento di generazione
                    if (existingContent.includes(generatedByComment)) {
                        console.log(`‚è© File ${file} gi√† generato da releaser, salto...`);
                        skippedFiles++;
                        return;
                    } else {
                        console.log(`üîÑ File ${file} esistente ma non generato da releaser, sovrascrivo...`);
                        overwrittenFiles++;
                    }
                } catch (readError) {
                    console.error(`üîÑ Errore nella lettura del file ${file}: ${readError.message}`);
                    console.log(`üîÑ Errore nella lettura del file ${file}, procedo con la sovrascrittura`);
                    overwrittenFiles++;
                }
            } else {
                addedFiles++;
            }
            
            // Scrivi il file usando i dati incorporati
            writeFileSync(filePath, sampleFilesData[file]);
            console.log(`‚úÖ File ${file} ${existsSync(filePath) ? 'sovrascritto' : 'aggiunto'} con successo`);
        } catch (error) {
            console.error(`‚ùå Errore durante l'aggiunta del file ${file}: ${error.message}`);
            errorFiles++;
        }
    });
    
    console.log(`\nüìä Riepilogo: ${addedFiles} file aggiunti, ${overwrittenFiles} file sovrascritti, ${skippedFiles} file saltati, ${errorFiles} errori\n`);
}

export default addConfigurationFiles;
